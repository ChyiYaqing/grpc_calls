// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/documents.proto

package documents

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DocumentsClient is the client API for Documents service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocumentsClient interface {
	// GetDocuments
	GetDocuments(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (Documents_GetDocumentsClient, error)
}

type documentsClient struct {
	cc grpc.ClientConnInterface
}

func NewDocumentsClient(cc grpc.ClientConnInterface) DocumentsClient {
	return &documentsClient{cc}
}

func (c *documentsClient) GetDocuments(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (Documents_GetDocumentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Documents_ServiceDesc.Streams[0], "/documents.Documents/GetDocuments", opts...)
	if err != nil {
		return nil, err
	}
	x := &documentsGetDocumentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Documents_GetDocumentsClient interface {
	Recv() (*GetDocumentsRes, error)
	grpc.ClientStream
}

type documentsGetDocumentsClient struct {
	grpc.ClientStream
}

func (x *documentsGetDocumentsClient) Recv() (*GetDocumentsRes, error) {
	m := new(GetDocumentsRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DocumentsServer is the server API for Documents service.
// All implementations must embed UnimplementedDocumentsServer
// for forward compatibility
type DocumentsServer interface {
	// GetDocuments
	GetDocuments(*EmptyReq, Documents_GetDocumentsServer) error
	mustEmbedUnimplementedDocumentsServer()
}

// UnimplementedDocumentsServer must be embedded to have forward compatible implementations.
type UnimplementedDocumentsServer struct {
}

func (UnimplementedDocumentsServer) GetDocuments(*EmptyReq, Documents_GetDocumentsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDocuments not implemented")
}
func (UnimplementedDocumentsServer) mustEmbedUnimplementedDocumentsServer() {}

// UnsafeDocumentsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocumentsServer will
// result in compilation errors.
type UnsafeDocumentsServer interface {
	mustEmbedUnimplementedDocumentsServer()
}

func RegisterDocumentsServer(s grpc.ServiceRegistrar, srv DocumentsServer) {
	s.RegisterService(&Documents_ServiceDesc, srv)
}

func _Documents_GetDocuments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DocumentsServer).GetDocuments(m, &documentsGetDocumentsServer{stream})
}

type Documents_GetDocumentsServer interface {
	Send(*GetDocumentsRes) error
	grpc.ServerStream
}

type documentsGetDocumentsServer struct {
	grpc.ServerStream
}

func (x *documentsGetDocumentsServer) Send(m *GetDocumentsRes) error {
	return x.ServerStream.SendMsg(m)
}

// Documents_ServiceDesc is the grpc.ServiceDesc for Documents service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Documents_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "documents.Documents",
	HandlerType: (*DocumentsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDocuments",
			Handler:       _Documents_GetDocuments_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/documents.proto",
}
